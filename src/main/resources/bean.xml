<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
    <context:component-scan base-package="com.school"></context:component-scan>

<!--    通过构造函数初始化Bean-->
<!--    <bean id="AccountService" class="com.school.springdemo.AccountService" scope="singleton"></bean>-->


<!--    使用某个类中的方法创建对象-->
     <bean id="FactoryInstance" class="com.school.springdemo.FactoryInstance"></bean>
<!--    使用非静态方法-->
    <bean id="AccountService" factory-bean="FactoryInstance" factory-method="getAAccountService"></bean>
<!--    使用静态方法-->
    <bean id="AccountServiceStatic" class="com.school.springdemo.FactoryInstance" factory-method="getAcctSerice"></bean>


    <bean id="BankService" class="com.school.springdemo.BankServiceImpl">
        <property name="bankNo" value="1"/>
        <property name="bankName" value="bankName"/>
        <property name="date" ref="time"></property>

    </bean>

    <bean id="time" class="java.util.Date"></bean>


    <bean name="BankServiceImplBeijing" class="com.school.springdemo.BankServiceImplBeijing">
        <property name="list">
            <list>
                <value>小莫</value>
                <value>小李</value>
                <value>王凯</value>
            </list>
        </property>
        <property name="set">
            <list>
                <value>zhangsan</value>
                <value>zhangsan</value>
                <value>zhangsan</value>
                <value>lisi</value>
                <value>wangwu</value>
            </list>

        </property>
    </bean>

    <!-- Spring实例化bean-->
    <!-- Spring实例化bean-->
    <!-- Spring实例化bean-->



<!-- 001.   演示spring实例化bean的三种方法之[非静态工厂方法]-->
    <bean id="student" class="com.school.springdemo.Student" scope="singleton"/>
    <bean id="teacher" factory-bean="student" factory-method="getTeacher"/>

    <!-- 002.   演示spring实例化bean的三种方法之[静态工厂方法]-->

    <bean id="capitalCity" class="com.school.springdemo.Coutry" factory-method="getChiaCapital"/>

<!--    003.通过构造函数实例化bean-->
    <bean id="person" class="com.school.springdemo.Person" init-method="personInit" destroy-method="personDestory"/>


    <!-- Spring Bean装配/依赖注入-->
    <!-- Spring Bean装配/依赖注入-->
    <!-- Spring Bean装配/依赖注入-->

<!--   2.0.01 Spring基于XML装配Bean之 之set方法注入 属性值-->
    <bean id="worker" class="com.school.springdemo.Worker">
        <property name="name" value="张小明"/>
        <property name="age" value="18"/>
        <property name="joinDate" ref="joindate"/>

    </bean>
    <bean id="joindate" class="java.util.Date"/>
    <!--   2.0.02 Spring基于XML装配Bean之 之set方法注入 属性值-->
    <bean id="boss" class="com.school.springdemo.Boss">
        <constructor-arg name="bossName" value="王建林"/>
        <constructor-arg name="age" value="60"/>
    </bean>

<!--       2.1.01   Spring基于XML装配Bean之 之构造函数注入对象-->
    <bean id="staff" class="com.school.springdemo.Staff">
        <constructor-arg name="department" ref="department"/>
    </bean>
    <bean id="department" class="com.school.entity.Department">
        <property name="id" value="01"/>
        <property name="name" value="教研部"/>
    </bean>
    <!--    2.1.02   Spring基于XML装配Bean之 之set方法注入对象 -->

    <bean id="leader" class="com.school.springdemo.Leader">
        <property name="department" ref="leaderDept"/>
    </bean>
    <bean id="leaderDept" class="com.school.entity.Department">
        <property name="id" value="03"/>
        <property name="name" value="市场部"/>
    </bean>
    <!--    2.2.01   Spring Bean装配之基于注解 -->
<!--
    1）@Component
    可以使用此注解描述 Spring 中的 Bean，但它是一个泛化的概念，仅仅表示一个组件（Bean），并且可以作用在任何层次。使用时只需将该注解标注在相应类上即可。
    2）@Repository
    用于将数据访问层（DAO层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。
    3）@Service
    通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。
    4）@Controller
    通常作用在控制层（如 Struts2 的 Action），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。
    5）@Autowired
    用于对 Bean 的属性变量、属性的 Set 方法及构造函数进行标注，配合对应的注解处理器完成 Bean 的自动配置工作。默认按照 Bean 的类型进行装配。
    6）@Resource
    其作用与 Autowired 一样。其区别在于 @Autowired 默认按照 Bean 类型装配，而 @Resource 默认按照 Bean 实例名称进行装配。

    @Resource 中有两个重要属性：name 和 type。

    Spring 将 name 属性解析为 Bean 实例名称，type 属性解析为 Bean 实例类型。如果指定 name 属性，则按实例名称进行装配；如果指定 type 属性，则按 Bean 类型进行装配。

  如果都不指定，则先按 Bean 实例名称装配，如果不能匹配，则再按照 Bean 类型进行装配；如果都无法匹配，则抛出 NoSuchBeanDefinitionException 异常。
    7）@Qualifier
与 @Autowired 注解配合使用，会将默认的按 Bean 类型装配修改为按 Bean 的实例名称装配，Bean 的实例名称由 @Qualifier 注解的参数指定。
  -->


    <!--    2.2.01   Spring Bean装配之 自动装配 -->
















































</beans>
